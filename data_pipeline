# Importing the necessary libraries
import pandas as pd
import sqlite3
import numpy as np

def csv_data(filepath):
    '''
    Read the data from the CSV file at filepath into a DataFrame.
    Perform any necessary data transformations or cleaning.
    :param filepath (str): path to the CSV file
    :return: DataFrame: cleaned data
    '''
    # Read the data and create DataFrame
    data = pd.read_csv('data.csv')

    # Find and count missing values
    na_values = data.isna().sum() 

    # Fill missing values with 0, except for 'AGENCY' and 'OCEAN_PROXIMITY'
    for column in data.columns:
        if column not in ['AGENCY', 'OCEAN_PROXIMITY']:
            data[column] = data[column].fillna(0)

    # Fill missing for 'AGENCY' and 'OCEAN_PROXIMITY'
    data['AGENCY'] = data['AGENCY'].replace([np.nan, ' '], 'UNKNOWN')
    data['OCEAN_PROXIMITY'] = data['OCEAN_PROXIMITY'].replace([np.nan, 'Null'], 'UNKNOWN')

    return data

def create_connection(database):
    '''
    Establish a connection to a SQLite database specified by database.
    :param database (str): database file
    :return: connection or None
    '''
    conn = sqlite3.connect('database.db')
    return conn 

def load_data(data, conn):
    '''
    Load a DataFrame into a SQL database.
    :param data: the data to load
    :param conn: the database connection
    :return: None
    '''
    # Load the DataFrame into the SQL table 'house'
    data.to_sql('house', conn, if_exists='replace', index=False)
    
    # Commit 
    conn.commit()

def view_data(query, conn):
    '''
    Query the database and return the results.
    :param query (str): the SQL query to execute 
    :param conn: the database connection
    :return: DataFrame: the result of the query 
    '''
    df = pd.read_sql_query(query,conn)
    return df


if __name__ == "__main__":
    filepath = 'data.csv'
    database = 'database.db'
    data = csv_data(filepath)
    conn = create_connection(database)
    load_data(data, conn)
    conn.close()